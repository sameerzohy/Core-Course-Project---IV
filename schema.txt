Events Schema: 

{
  "_id": ObjectId,
  "title": "Event Name",
  "description": "Detailed description of the event",
  "eventType": "workshop" | "competition",
  "date": ISODate("2025-04-15T10:00:00Z"),
  "location": "Venue or Online",
  "bannerImage": "https://image-url.com",
  "registrationFee": 100, 
  "maxParticipants": 50,
  "organizer": {
    "name": "Organizer Name",
    "contact": "+91XXXXXXXXXX",
    "email": "organizer@example.com"
  },
  "registrations": [
    {
      "userId": ObjectId,
      "timestamp": ISODate("2025-04-01T12:00:00Z"),
      "paymentStatus": "pending" | "paid"
    }
  ],
  "createdAt": ISODate("2025-03-10T08:00:00Z"),
  "updatedAt": ISODate("2025-03-11T10:00:00Z")
}


Workshops Schema: 
 {
  "_id": ObjectId,
  "eventId": ObjectId,
  "speaker": {
    "name": "Speaker Name",
    "designation": "Speaker's Role",
    "bio": "Short bio of the speaker",
    "profileImage": "https://image-url.com"
  },
  "topicsCovered": [
    "Flutter Basics",
    "State Management",
    "Animations in Flutter"
  ],
  "duration": "2 hours",
  "requirements": ["Laptop", "VS Code Installed"],
  "certificateProvided": true
}


Competition Schema: 

{
  "_id": ObjectId,
  "eventId": ObjectId,
  "prizes": [
    {
      "position": 1,
      "reward": "₹5000 Cash Prize"
    },
    {
      "position": 2,
      "reward": "₹3000 Amazon Voucher"
    }
  ],
  "rules": [
    "Each participant must register individually",
    "Teams must not exceed 3 members"
  ],
  "judgingCriteria": [
    "Innovation",
    "Execution",
    "Presentation"
  ],
  "teamSize": {
    "min": 1,
    "max": 3
  }
}


4.User Schema: 

{
  "_id": ObjectId,
  "name": "User Name",
  "email": "user@example.com",
  "password": "hashed_password",
  "registeredEvents": [
    {
      "eventId": ObjectId,
      "registrationDate": ISODate("2025-04-01T12:00:00Z"),
      "status": "confirmed" | "pending"
    }
  ]
}













// my own form page:
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class HackathonAppliedScreen extends StatefulWidget {
  const HackathonAppliedScreen({super.key});

  @override
  State<HackathonAppliedScreen> createState() => _HackathonAppliedScreenState();
}

class _HackathonAppliedScreenState extends State<HackathonAppliedScreen> {
  final _formKey = GlobalKey<FormState>();
  String hackathonName = '';
  String hackathonMode = 'Online';
  final dateController = TextEditingController();
  final timeController = TextEditingController();
  bool isPayment = false;

  void uploadDetails() {
    if (!_formKey.currentState!.validate()) return;

    _formKey.currentState!.save();
    print(hackathonName);
  }

  void _selectDate() async {
    DateTime? picked = await showDatePicker(
      context: context,
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
      initialDate: DateTime.now(),
    );

    if (picked != null) {
      setState(() {
        dateController.text = DateFormat('dd-MM-yyyy').format(picked);
      });
      // print(date);
    }
  }

  void _selectTime() async {
    TimeOfDay? picked =
        await showTimePicker(context: context, initialTime: TimeOfDay.now());
    if (picked != null) {
      setState(() {
        timeController.text = picked.format(context);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Container(
        margin: EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                  autocorrect: true,
                  decoration: InputDecoration(
                    labelText: 'Hackathon Name',
                    hintText: 'Enter Hackathon Name',
                    // label: Text('Hackathon Name'),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0),
                      borderSide: BorderSide(color: Colors.grey, width: 1.0),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: BorderSide(
                        width: 2.0,
                        color: Colors.blue,
                      ),
                    ),
                  ),
                  validator: (value) {
                    if (value == null ||
                        value.isEmpty ||
                        value.trim().isEmpty) {
                      return 'Please Enter Hackathon Name';
                    }
                    return null;
                  },
                  onSaved: (value) {
                    hackathonName = value!;
                  }),
              const SizedBox(height: 20),

              // DrowDown Menu

              DropdownButtonFormField<String>(
                  value: 'Online',
                  items: [
                    DropdownMenuItem(child: Text('Online'), value: 'Online'),
                    DropdownMenuItem(child: Text('Offline'), value: 'Offline'),
                    DropdownMenuItem(child: Text('Hybrid'), value: 'Hybrid')
                  ],
                  onChanged: (value) {
                    hackathonMode = value!;
                  },
                  decoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0),
                      borderSide: BorderSide(color: Colors.grey, width: 2.0),
                    ),
                    labelText: 'Hackathon Mode',
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0),
                      borderSide: BorderSide(color: Colors.blue, width: 1.0),
                    ),
                  )),

              const SizedBox(height: 20),

              Text(
                'Date & Time',
                // textAlign: TextAlign.left,
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),

              TextFormField(
                controller: dateController,
                onTap: _selectDate,
                readOnly: true,
                decoration: const InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                      borderSide: BorderSide(color: Colors.grey, width: 1.0),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                      borderSide: BorderSide(color: Colors.blue, width: 1.0),
                    ),
                    labelText: 'Date',
                    suffixIcon: Icon(Icons.calendar_today),
                    hintText: 'Select Date'),
              ),

              const SizedBox(height: 20),

              TextFormField(
                controller: timeController,
                onTap: _selectTime,
                readOnly: true,
                decoration: const InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                      borderSide: BorderSide(color: Colors.grey, width: 1.0),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(10.0)),
                      borderSide: BorderSide(color: Colors.blue, width: 1.0),
                    ),
                    labelText: 'Time',
                    suffixIcon: Icon(Icons.watch_later_outlined),
                    hintText: 'Select Time'),
              ),

              const SizedBox(height: 20),

              Row(
                children: [
                  Checkbox(
                    value: isPayment,
                    onChanged: (value) {
                      setState(() {
                        isPayment = value!;
                      });
                    },
                  ),
                  Text('Payment Required'),
                ],
              ),

              const SizedBox(height: 20),

              TextFormField(
                autocorrect: true,
                maxLines: 5,
                decoration: InputDecoration(
                  labelText: 'Description',
                  hintText: 'Enter Description',
                  // label: Text('Description'),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10.0),
                    borderSide: BorderSide(color: Colors.grey, width: 1.0),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: BorderSide(
                      width: 2.0,
                      color: Colors.blue,
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: uploadDetails,
                  child: const Text('Create Hackathon',
                      style: TextStyle(fontSize: 18)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}




// api : key : AIzaSyB7lyyAsvcnpCJQv3Hqx-sUHQuNUEc79i4




// communityForum post

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

// Forum post model
class ForumPost {
  final String id;
  final String authorId;
  final String authorName;
  final String authorAvatar;
  final String title;
  final String content;
  final DateTime timestamp;
  final List<String> likedBy;
  final int commentCount;
  final String category;

  ForumPost({
    required this.id,
    required this.authorId,
    required this.authorName,
    required this.authorAvatar,
    required this.title,
    required this.content,
    required this.timestamp,
    required this.likedBy,
    required this.commentCount,
    required this.category,
  });

  factory ForumPost.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return ForumPost(
      id: doc.id,
      authorId: data['authorId'] ?? '',
      authorName: data['authorName'] ?? 'Anonymous',
      authorAvatar: data['authorAvatar'] ?? '',
      title: data['title'] ?? '',
      content: data['content'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      likedBy: List<String>.from(data['likedBy'] ?? []),
      commentCount: data['commentCount'] ?? 0,
      category: data['category'] ?? 'General',
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'authorId': authorId,
      'authorName': authorName,
      'authorAvatar': authorAvatar,
      'title': title,
      'content': content,
      'timestamp': Timestamp.fromDate(timestamp),
      'likedBy': likedBy,
      'commentCount': commentCount,
      'category': category,
    };
  }
}

// Comment model
class ForumComment {
  final String id;
  final String postId;
  final String authorId;
  final String authorName;
  final String authorAvatar;
  final String content;
  final DateTime timestamp;

  ForumComment({
    required this.id,
    required this.postId,
    required this.authorId,
    required this.authorName,
    required this.authorAvatar,
    required this.content,
    required this.timestamp,
  });

  factory ForumComment.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return ForumComment(
      id: doc.id,
      postId: data['postId'] ?? '',
      authorId: data['authorId'] ?? '',
      authorName: data['authorName'] ?? 'Anonymous',
      authorAvatar: data['authorAvatar'] ?? '',
      content: data['content'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'postId': postId,
      'authorId': authorId,
      'authorName': authorName,
      'authorAvatar': authorAvatar,
      'content': content,
      'timestamp': Timestamp.fromDate(timestamp),
    };
  }
}

// Firebase service
class ForumService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Get current user
  User? get currentUser => _auth.currentUser;

  // Get all posts with pagination
  Stream<List<ForumPost>> getForumPosts({
    String? category,
    int limit = 20,
    DocumentSnapshot? lastDocument,
  }) {
    Query query = _firestore.collection('forum_posts');

    // First apply category filter if needed
    if (category != null && category != 'All') {
      query = query.where('category', isEqualTo: category);
    }

    // Then apply sorting
    query = query.orderBy('timestamp', descending: true);

    query = query.limit(limit);

    if (lastDocument != null) {
      query = query.startAfterDocument(lastDocument);
    }

    return query.snapshots().map((snapshot) {
      return snapshot.docs.map((doc) => ForumPost.fromFirestore(doc)).toList();
    });
  }

  Future<List<ForumPost>> getForumPostsBatch({
    String? category,
    int limit = 20,
    DocumentSnapshot? lastDocument,
  }) async {
    Query query = _firestore.collection('forum_posts');

    // First apply category filter if needed
    if (category != null && category != 'All') {
      query = query.where('category', isEqualTo: category);
    }

    // Then apply sorting
    query = query.orderBy('timestamp', descending: true);

    // Apply limit
    query = query.limit(limit);

    // Apply pagination if lastDocument is provided
    if (lastDocument != null) {
      query = query.startAfterDocument(lastDocument);
    }

    final snapshot = await query.get();
    return snapshot.docs.map((doc) => ForumPost.fromFirestore(doc)).toList();
  }

  // Get posts by user
  Stream<List<ForumPost>> getUserPosts(String userId) {
    return _firestore
        .collection('forum_posts')
        .where('authorId', isEqualTo: userId)
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) => ForumPost.fromFirestore(doc)).toList();
    });
  }

  // Get a single post
  Stream<ForumPost?> getForumPost(String postId) {
    return _firestore
        .collection('forum_posts')
        .doc(postId)
        .snapshots()
        .map((doc) => doc.exists ? ForumPost.fromFirestore(doc) : null);
  }

  // Get a post document snapshot by id (for pagination)
  Future<DocumentSnapshot?> getPostSnapshot(String postId) async {
    return await _firestore.collection('forum_posts').doc(postId).get();
  }

  // Create a new post
  Future<void> createForumPost(
    String title,
    String content,
    String category,
  ) async {
    if (currentUser == null) throw Exception('User not authenticated');

    final userDoc =
        await _firestore.collection('users').doc(currentUser!.uid).get();
    final userData = userDoc.data() as Map<String, dynamic>?;

    await _firestore.collection('forum_posts').add({
      'authorId': currentUser!.uid,
      'authorName':
          userData?['displayName'] ?? currentUser!.displayName ?? 'Anonymous',
      'authorAvatar': userData?['photoURL'] ?? currentUser!.photoURL ?? '',
      'title': title,
      'content': content,
      'timestamp': Timestamp.now(),
      'likedBy': [],
      'commentCount': 0,
      'category': category,
    });
  }

  // Toggle like on a post
  Future<void> toggleLike(String postId) async {
    if (currentUser == null) throw Exception('User not authenticated');

    final postRef = _firestore.collection('forum_posts').doc(postId);

    return _firestore.runTransaction((transaction) async {
      final postSnapshot = await transaction.get(postRef);
      if (!postSnapshot.exists) return;

      final post = ForumPost.fromFirestore(postSnapshot);
      final userId = currentUser!.uid;
      final List<String> updatedLikedBy = List.from(post.likedBy);

      if (updatedLikedBy.contains(userId)) {
        updatedLikedBy.remove(userId);
      } else {
        updatedLikedBy.add(userId);
      }

      transaction.update(postRef, {'likedBy': updatedLikedBy});
    });
  }

  // Get comments for a post
// In ForumService class - Fixed return type issue
  Stream<List<ForumComment>> getComments(String postId) {
    return _firestore
        .collection('forum_comments')
        .where('postId', isEqualTo: postId)
        .orderBy('timestamp', descending: false)
        .snapshots()
        .map<List<ForumComment>>((snapshot) {
      // Use explicit type parameter to ensure correct return type
      try {
        return snapshot.docs
            .map<ForumComment>((doc) => ForumComment.fromFirestore(doc))
            .toList();
      } catch (e) {
        print('Error mapping comments: $e');
        // Return empty list of ForumComment type
        return <ForumComment>[];
      }
    }).handleError((error) {
      // Log errors but don't crash the stream
      print('Error in comments stream: $error');
      // Must return a List<ForumComment>, not List<dynamic>
      return <ForumComment>[];
    });
  }

  // Add a comment to a post
  Future<void> addComment(String postId, String content) async {
    if (currentUser == null) throw Exception('User not authenticated');

    final userDoc =
        await _firestore.collection('users').doc(currentUser!.uid).get();
    final userData = userDoc.data() as Map<String, dynamic>?;

    final batch = _firestore.batch();

    // Create comment
    final commentRef = _firestore.collection('forum_comments').doc();
    batch.set(commentRef, {
      'postId': postId,
      'authorId': currentUser!.uid,
      'authorName':
          userData?['displayName'] ?? currentUser!.displayName ?? 'Anonymous',
      'authorAvatar': userData?['photoURL'] ?? currentUser!.photoURL ?? '',
      'content': content,
      'timestamp': Timestamp.now(),
    });

    // Update comment count
    final postRef = _firestore.collection('forum_posts').doc(postId);
    batch.update(postRef, {'commentCount': FieldValue.increment(1)});

    await batch.commit();
  }

  // Delete a post (only author or admin)
  Future<void> deletePost(String postId) async {
    if (currentUser == null) throw Exception('User not authenticated');

    final postDoc =
        await _firestore.collection('forum_posts').doc(postId).get();
    if (!postDoc.exists) return;

    final post = ForumPost.fromFirestore(postDoc);
    // Check if current user is author
    if (post.authorId != currentUser!.uid) {
      // Check if user is admin
      final userDoc =
          await _firestore.collection('users').doc(currentUser!.uid).get();
      final userData = userDoc.data() as Map<String, dynamic>?;
      if (userData?['role'] != 'admin') {
        throw Exception('Permission denied');
      }
    }

    // Delete post and all its comments
    final batch = _firestore.batch();
    batch.delete(postDoc.reference);

    final comments = await _firestore
        .collection('forum_comments')
        .where('postId', isEqualTo: postId)
        .get();

    for (var comment in comments.docs) {
      batch.delete(comment.reference);
    }

    await batch.commit();
  }

  // Search posts
  Future<List<ForumPost>> searchPosts(String query) async {
    // This is a simple implementation - for production, consider using Algolia or other search service
    final snapshot = await _firestore
        .collection('forum_posts')
        .orderBy('timestamp', descending: true)
        .get();

    final allPosts =
        snapshot.docs.map((doc) => ForumPost.fromFirestore(doc)).toList();

    // Filter posts that contain the query in title or content
    // This is done client-side since Firestore doesn't support full text search
    return allPosts.where((post) {
      final titleMatch = post.title.toLowerCase().contains(query.toLowerCase());
      final contentMatch =
          post.content.toLowerCase().contains(query.toLowerCase());
      return titleMatch || contentMatch;
    }).toList();
  }
}

// Main forum screen
class CommunityForumScreen extends StatefulWidget {
  const CommunityForumScreen({Key? key}) : super(key: key);

  @override
  _CommunityForumScreenState createState() => _CommunityForumScreenState();
}

class _CommunityForumScreenState extends State<CommunityForumScreen> {
  final ForumService _forumService = ForumService();
  String _selectedCategory = 'All';
  final List<String> _categories = [
    'All',
    'General',
    'Questions',
    'Projects',
    'Events',
    'Resources'
  ];
  DocumentSnapshot? _lastDocument;
  List<ForumPost> _posts = [];
  bool _isLoading = false;
  bool _hasMorePosts = true;
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _loadPosts();
    _scrollController.addListener(_scrollListener);
  }

  @override
  void dispose() {
    _scrollController.removeListener(_scrollListener);
    _scrollController.dispose();
    super.dispose();
  }

  void _scrollListener() {
    if (_scrollController.position.pixels ==
        _scrollController.position.maxScrollExtent) {
      if (!_isLoading && _hasMorePosts) {
        _loadMorePosts();
      }
    }
  }

  Future<void> _loadPosts() async {
    setState(() {
      _isLoading = true;
      _posts = [];
      _lastDocument = null;
      _hasMorePosts = true;
    });

    try {
      // First attempt - original query
      try {
        final posts = await _forumService.getForumPostsBatch(
          category: _selectedCategory == 'All' ? null : _selectedCategory,
        );

        setState(() {
          _posts = posts;
          _isLoading = false;

          if (posts.isNotEmpty) {
            _updateLastDocument(posts.last.id);
          }

          if (posts.isEmpty || posts.length < 20) {
            _hasMorePosts = false;
          }
        });
      } catch (e) {
        // If we get an index error, try a fallback approach
        if (e.toString().contains('index')) {
          print('Index error detected, using fallback query');
          // Get all posts and filter client-side
          final allPosts = await _forumService._firestore
              .collection('forum_posts')
              .orderBy('timestamp', descending: true)
              .get();

          final filteredPosts = allPosts.docs
              .map((doc) => ForumPost.fromFirestore(doc))
              .where((post) =>
                  _selectedCategory == 'All' ||
                  post.category == _selectedCategory)
              .take(20)
              .toList();

          setState(() {
            _posts = filteredPosts;
            _isLoading = false;

            if (filteredPosts.isNotEmpty) {
              _updateLastDocument(filteredPosts.last.id);
            }

            if (filteredPosts.isEmpty || filteredPosts.length < 20) {
              _hasMorePosts = false;
            }
          });
        } else {
          // Some other error
          throw e;
        }
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      print('Error loading posts: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading posts. Please try again later.')),
      );
    }
  }

  Future<void> _updateLastDocument(String postId) async {
    final docSnapshot = await _forumService.getPostSnapshot(postId);
    if (docSnapshot != null && docSnapshot.exists) {
      setState(() {
        _lastDocument = docSnapshot;
      });
    }
  }

  Future<void> _loadMorePosts() async {
    if (_isLoading || !_hasMorePosts) return;

    // If _lastDocument is null, we shouldn't try to load more
    if (_lastDocument == null) {
      setState(() {
        _hasMorePosts = false;
      });
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final newPosts = await _forumService.getForumPostsBatch(
        category: _selectedCategory == 'All' ? null : _selectedCategory,
        lastDocument: _lastDocument,
      );

      setState(() {
        _posts.addAll(newPosts);
        _isLoading = false;

        if (newPosts.isNotEmpty) {
          _updateLastDocument(newPosts.last.id);
        }

        if (newPosts.isEmpty || newPosts.length < 20) {
          _hasMorePosts = false;
        }
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      print('Error loading more posts: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading more posts: $e')),
      );
    }
  }

  void _changeCategory(String category) {
    setState(() {
      _selectedCategory = category;
    });
    _loadPosts();
  }

  void _openSearch() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => SearchScreen(forumService: _forumService),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          _buildCategorySelector(),
          Expanded(
            child: _posts.isEmpty && !_isLoading
                ? _buildEmptyState()
                : _buildPostsList(),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          if (_forumService.currentUser == null) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Please log in to create a post')),
            );
            _navigateToLogin();
            return;
          }
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => CreatePostScreen(
                forumService: _forumService,
                onPostCreated: () {
                  _loadPosts();
                },
              ),
            ),
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }

  void _navigateToLogin() {
    // Navigate to login screen
    // For example:
    // Navigator.push(context, MaterialPageRoute(builder: (context) => LoginScreen()));
    // Replace LoginScreen with your actual login screen
    print('Navigate to login screen');
  }

  Widget _buildCategorySelector() {
    return Container(
      height: 50,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _categories.length,
        itemBuilder: (context, index) {
          final category = _categories[index];
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 4),
            child: ChoiceChip(
              label: Text(category),
              selected: _selectedCategory == category,
              onSelected: (selected) {
                if (selected) {
                  _changeCategory(category);
                }
              },
            ),
          );
        },
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.forum_outlined, size: 80, color: Colors.grey[400]),
          const SizedBox(height: 16),
          Text(
            'No posts in this category yet',
            style: TextStyle(fontSize: 18, color: Colors.grey[600]),
          ),
          const SizedBox(height: 8),
          ElevatedButton(
            onPressed: () {
              if (_forumService.currentUser == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                      content: Text('Please log in to create a post')),
                );
                _navigateToLogin();
                return;
              }
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CreatePostScreen(
                    forumService: _forumService,
                    onPostCreated: () {
                      _loadPosts();
                    },
                  ),
                ),
              );
            },
            child: const Text('Create First Post'),
          ),
        ],
      ),
    );
  }

  Widget _buildPostsList() {
    return RefreshIndicator(
      onRefresh: _loadPosts,
      child: ListView.builder(
        controller: _scrollController,
        itemCount: _posts.length + (_isLoading && _hasMorePosts ? 1 : 0),
        itemBuilder: (context, index) {
          if (index == _posts.length) {
            return const Center(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: CircularProgressIndicator(),
              ),
            );
          }

          final post = _posts[index];
          return PostCard(
            post: post,
            forumService: _forumService,
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => PostDetailScreen(
                    postId: post.id,
                    forumService: _forumService,
                  ),
                ),
              ).then((_) {
                // Refresh on return
                _loadPosts();
              });
            },
          );
        },
      ),
    );
  }
}

// Post card component
class PostCard extends StatelessWidget {
  final ForumPost post;
  final ForumService forumService;
  final VoidCallback onTap;

  const PostCard({
    Key? key,
    required this.post,
    required this.forumService,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    backgroundImage: post.authorAvatar.isNotEmpty
                        ? NetworkImage(post.authorAvatar)
                        : null,
                    radius: 18,
                    child: post.authorAvatar.isEmpty
                        ? Text(post.authorName.isNotEmpty
                            ? post.authorName[0]
                            : '?')
                        : null,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          post.authorName,
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        Text(
                          DateFormat.yMMMd().add_jm().format(post.timestamp),
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                  Chip(
                    label: Text(post.category),
                    padding: EdgeInsets.zero,
                    labelPadding: const EdgeInsets.symmetric(horizontal: 8),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Text(
                post.title,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                post.content.length > 150
                    ? '${post.content.substring(0, 150)}...'
                    : post.content,
                style: const TextStyle(fontSize: 14),
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  LikeButton(
                    post: post,
                    forumService: forumService,
                  ),
                  const SizedBox(width: 16),
                  Icon(Icons.comment_outlined,
                      size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 4),
                  Text(
                    '${post.commentCount} comments',
                    style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Like button component
class LikeButton extends StatelessWidget {
  final ForumPost post;
  final ForumService forumService;

  const LikeButton({
    Key? key,
    required this.post,
    required this.forumService,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final currentUser = forumService.currentUser;
    final isLiked =
        currentUser != null && post.likedBy.contains(currentUser.uid);

    return InkWell(
      onTap: () {
        if (currentUser == null) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Please log in to like posts')),
          );
          return;
        }
        forumService.toggleLike(post.id);
      },
      child: Row(
        children: [
          Icon(
            isLiked ? Icons.favorite : Icons.favorite_border,
            size: 16,
            color: isLiked ? Colors.red : Colors.grey[600],
          ),
          const SizedBox(width: 4),
          Text(
            '${post.likedBy.length} likes',
            style: TextStyle(
              fontSize: 14,
              color: isLiked ? Colors.red : Colors.grey[600],
            ),
          ),
        ],
      ),
    );
  }
}

// Create post screen
class CreatePostScreen extends StatefulWidget {
  final ForumService forumService;
  final VoidCallback onPostCreated;

  const CreatePostScreen({
    Key? key,
    required this.forumService,
    required this.onPostCreated,
  }) : super(key: key);

  @override
  _CreatePostScreenState createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();
  String _selectedCategory = 'General';
  bool _isSubmitting = false;
  final List<String> _categories = [
    'General',
    'Questions',
    'Projects',
    'Events',
    'Resources'
  ];

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  Future<void> _submitPost() async {
    if (_formKey.currentState?.validate() != true) return;

    setState(() {
      _isSubmitting = true;
    });

    try {
      await widget.forumService.createForumPost(
        _titleController.text.trim(),
        _contentController.text.trim(),
        _selectedCategory,
      );
      widget.onPostCreated();
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error creating post: ${e.toString()}')),
      );
      setState(() {
        _isSubmitting = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Post'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: 'Title',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter a title';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _selectedCategory,
              decoration: const InputDecoration(
                labelText: 'Category',
                border: OutlineInputBorder(),
              ),
              items: _categories.map((category) {
                return DropdownMenuItem(
                  value: category,
                  child: Text(category),
                );
              }).toList(),
              onChanged: (value) {
                if (value != null) {
                  setState(() {
                    _selectedCategory = value;
                  });
                }
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _contentController,
              decoration: const InputDecoration(
                labelText: 'Content',
                border: OutlineInputBorder(),
                alignLabelWithHint: true,
              ),
              maxLines: 10,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter post content';
                }
                return null;
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _isSubmitting ? null : _submitPost,
              child: _isSubmitting
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        ),
                        SizedBox(width: 12),
                        Text('Posting...'),
                      ],
                    )
                  : const Text('Publish Post'),
            ),
          ],
        ),
      ),
    );
  }
}

// Post detail screen
class PostDetailScreen extends StatefulWidget {
  final String postId;
  final ForumService forumService;

  const PostDetailScreen({
    Key? key,
    required this.postId,
    required this.forumService,
  }) : super(key: key);

  @override
  _PostDetailScreenState createState() => _PostDetailScreenState();
}

class _PostDetailScreenState extends State<PostDetailScreen> {
  final _commentController = TextEditingController();
  bool _isSubmittingComment = false;

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
    // Debug helper - check if we have needed indexes
    _checkFirebaseIndexes();
  }

  Future<void> _checkFirebaseIndexes() async {
    try {
      // Test query to see if needed indexes exist
      await widget.forumService._firestore
          .collection('forum_comments')
          .where('postId', isEqualTo: widget.postId)
          .orderBy('timestamp')
          .limit(1)
          .get();
      print('Comment indexes exist - query successful');
    } catch (e) {
      print('Comment indexes may need to be created: $e');
      // Only show this to developers, not to users
      if (e.toString().contains('index')) {
        // Extract the URL if it exists
        final urlRegExp =
            RegExp(r'https:\/\/console\.firebase\.google\.com[^\s]+');
        final match = urlRegExp.firstMatch(e.toString());
        if (match != null) {
          final indexUrl = match.group(0);
          print('Create the index here: $indexUrl');
        }
      }
    }
  }

  Future<void> _submitComment() async {
    final commentText = _commentController.text.trim();
    if (commentText.isEmpty) return;

    setState(() {
      _isSubmittingComment = true;
    });

    try {
      // Add a loading delay to prevent UI flashing on quick operations
      await widget.forumService.addComment(
        widget.postId,
        commentText,
      );
      _commentController.clear();

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Comment posted successfully')),
      );
    } catch (e) {
      print('Error posting comment: $e');
      // Show error with more details
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error posting comment. Please try again.'),
          action: SnackBarAction(
            label: 'Retry',
            onPressed: _submitComment,
          ),
        ),
      );
    } finally {
      // Make sure this runs even if there's an error
      if (mounted) {
        // Check if widget is still in the tree
        setState(() {
          _isSubmittingComment = false;
        });
      }
    }
  }

  Future<void> _deletePost(BuildContext context, ForumPost post) async {
    final confirm = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Post'),
        content: const Text(
            'Are you sure you want to delete this post? This cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('Delete'),
          ),
        ],
      ),
    );

    if (confirm == true) {
      try {
        await widget.forumService.deletePost(post.id);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Post deleted successfully')),
        );
        Navigator.pop(context);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error deleting post: ${e.toString()}')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Post Details'),
      ),
      body: StreamBuilder<ForumPost?>(
        stream: widget.forumService.getForumPost(widget.postId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(
              child: Text('Error: ${snapshot.error}'),
            );
          }

          final post = snapshot.data;
          if (post == null) {
            return const Center(
              child: Text('Post not found'),
            );
          }

          return Column(
            children: [
              Expanded(
                child: ListView(
                  padding: const EdgeInsets.all(16),
                  children: [
                    _buildPostDetails(context, post),
                    const Divider(height: 32),
                    _buildCommentsSection(context),
                  ],
                ),
              ),
              _buildCommentInput(context),
            ],
          );
        },
      ),
    );
  }

  Widget _buildPostDetails(BuildContext context, ForumPost post) {
    final currentUser = widget.forumService.currentUser;
    final isAuthor = currentUser != null && post.authorId == currentUser.uid;

    return Card(
      margin: EdgeInsets.zero,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  backgroundImage: post.authorAvatar.isNotEmpty
                      ? NetworkImage(post.authorAvatar)
                      : null,
                  radius: 20,
                  child: post.authorAvatar.isEmpty
                      ? Text(
                          post.authorName.isNotEmpty ? post.authorName[0] : '?')
                      : null,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        post.authorName,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      Text(
                        DateFormat.yMMMd().add_jm().format(post.timestamp),
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
                if (isAuthor)
                  IconButton(
                    icon: const Icon(Icons.delete_outline),
                    onPressed: () => _deletePost(context, post),
                  ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              post.title,
              style: const TextStyle(
                fontSize: 22,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Chip(
              label: Text(post.category),
              padding: EdgeInsets.zero,
              labelPadding: const EdgeInsets.symmetric(horizontal: 8),
            ),
            const SizedBox(height: 16),
            Text(
              post.content,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 24),
            Row(
              children: [
                LikeButton(
                  post: post,
                  forumService: widget.forumService,
                ),
                const SizedBox(width: 16),
                Icon(Icons.comment_outlined, size: 16, color: Colors.grey[600]),
                const SizedBox(width: 4),
                Text(
                  '${post.commentCount} comments',
                  style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCommentsSection(BuildContext context) {
    return StreamBuilder<List<ForumComment>>(
      stream: widget.forumService.getComments(widget.postId),
      builder: (context, snapshot) {
        // Handle loading state
        if (snapshot.connectionState == ConnectionState.waiting &&
            !snapshot.hasData) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.all(16.0),
              child: CircularProgressIndicator(),
            ),
          );
        }

        // Handle error state with retry option
        if (snapshot.hasError) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Error loading comments: ${snapshot.error}'),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    // Force refresh by rebuilding the widget
                    setState(() {});
                  },
                  child: const Text('Retry'),
                ),
              ],
            ),
          );
        }

        // Get comments or use empty list
        final comments = snapshot.data ?? [];

        // Empty state
        if (comments.isEmpty) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.all(32.0),
              child: Text('No comments yet. Be the first to comment!'),
            ),
          );
        }

        // Success state - show comments list
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.only(bottom: 8),
              child: Text(
                'Comments (${comments.length})',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            ListView.builder(
              // Using ListView.builder for better performance
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: comments.length,
              itemBuilder: (context, index) =>
                  _buildCommentItem(comments[index]),
            ),
          ],
        );
      },
    );
  }

  Widget _buildCommentItem(ForumComment comment) {
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  backgroundImage: comment.authorAvatar.isNotEmpty
                      ? NetworkImage(comment.authorAvatar)
                      : null,
                  radius: 16,
                  child: comment.authorAvatar.isEmpty
                      ? Text(comment.authorName.isNotEmpty
                          ? comment.authorName[0]
                          : '?')
                      : null,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        comment.authorName,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        DateFormat.yMMMd().add_jm().format(comment.timestamp),
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(comment.content),
          ],
        ),
      ),
    );
  }

  Widget _buildCommentInput(BuildContext context) {
    final currentUser = widget.forumService.currentUser;

    if (currentUser == null) {
      return Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.grey[100],
          border: Border(
            top: BorderSide(color: Colors.grey[300]!),
          ),
        ),
        child: Center(
          child: ElevatedButton(
            onPressed: () {
              // Navigate to login screen
              // Replace with your actual login navigation
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Please log in to comment')),
              );
            },
            child: const Text('Log in to comment'),
          ),
        ),
      );
    }

    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        border: Border(
          top: BorderSide(color: Colors.grey[300]!),
        ),
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _commentController,
              decoration: const InputDecoration(
                hintText: 'Write a comment...',
                border: OutlineInputBorder(),
                contentPadding: EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 8,
                ),
              ),
              maxLines: 3,
              minLines: 1,
            ),
          ),
          const SizedBox(width: 8),
          IconButton(
            icon: _isSubmittingComment
                ? const SizedBox(
                    width: 24,
                    height: 24,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                : const Icon(Icons.send),
            onPressed: _isSubmittingComment ? null : _submitComment,
          ),
        ],
      ),
    );
  }
}

// Search screen
class SearchScreen extends StatefulWidget {
  final ForumService forumService;

  const SearchScreen({
    Key? key,
    required this.forumService,
  }) : super(key: key);

  @override
  _SearchScreenState createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final _searchController = TextEditingController();
  List<ForumPost> _searchResults = [];
  bool _isSearching = false;
  bool _hasSearched = false;

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _performSearch() async {
    final query = _searchController.text.trim();
    if (query.isEmpty) return;

    setState(() {
      _isSearching = true;
      _hasSearched = true;
    });

    try {
      final results = await widget.forumService.searchPosts(query);
      setState(() {
        _searchResults = results;
        _isSearching = false;
      });
    } catch (e) {
      setState(() {
        _isSearching = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error searching: ${e.toString()}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Search Posts'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _searchController,
                    decoration: const InputDecoration(
                      hintText: 'Search posts...',
                      border: OutlineInputBorder(),
                      prefixIcon: Icon(Icons.search),
                    ),
                    onSubmitted: (_) => _performSearch(),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: _isSearching ? null : _performSearch,
                  child: _isSearching
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Text('Search'),
                ),
              ],
            ),
          ),
          Expanded(
            child: _hasSearched
                ? _isSearching
                    ? const Center(child: CircularProgressIndicator())
                    : _searchResults.isEmpty
                        ? _buildNoResultsView()
                        : _buildSearchResultsList()
                : _buildInitialView(),
          ),
        ],
      ),
    );
  }

  Widget _buildInitialView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.search, size: 80, color: Colors.grey[400]),
          const SizedBox(height: 16),
          Text(
            'Search for forum posts',
            style: TextStyle(fontSize: 18, color: Colors.grey[600]),
          ),
          const SizedBox(height: 8),
          Text(
            'Type keywords to find relevant posts',
            style: TextStyle(fontSize: 14, color: Colors.grey[500]),
          ),
        ],
      ),
    );
  }

  Widget _buildNoResultsView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.sentiment_dissatisfied, size: 80, color: Colors.grey[400]),
          const SizedBox(height: 16),
          Text(
            'No results found',
            style: TextStyle(fontSize: 18, color: Colors.grey[600]),
          ),
          const SizedBox(height: 8),
          Text(
            'Try different keywords or browse the forum',
            style: TextStyle(fontSize: 14, color: Colors.grey[500]),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchResultsList() {
    return ListView.builder(
      itemCount: _searchResults.length,
      itemBuilder: (context, index) {
        final post = _searchResults[index];
        return PostCard(
          post: post,
          forumService: widget.forumService,
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => PostDetailScreen(
                  postId: post.id,
                  forumService: widget.forumService,
                ),
              ),
            );
          },
        );
      },
    );
  }
}

// Main entry point for the Community Forum feature


